# Start an app on a container
- hosts: nodes
  become: no
  gather_facts: no

  vars_files:
    - vars/main.yml
    - config/config.yml

  vars:
    - container_bind_dir: "{{ bind_dir }}/{{ container }}"

  environment:
    BDWATCHDOG_PATH: "{{ bdwatchdog_path }}"
    RESCALING_PATH: "{{ serverless_containers_path }}/scripts/"
    PYTHONPATH: ":{{ serverless_containers_path }}"

  ## Singularity + cgroups v1
  tasks:
  ## Setup network
  ## TODO: maybe setup a DNS server is better
  ## TODO: setup iptables
  - name: Setup network on containers
    block:

      - name: Get containers IP addresses
        when: item.host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} hostname -I | awk '{print $1}'"
        args:
          executable: /bin/bash
        loop: "{{ containers_info }}"
        register: ip_addresses

      - name: Update hostname resolution in containers
        #when: item[0].host == inventory_hostname and item[0].container_name != item[1].item.container_name
        when: item[0].host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[0].container_name }} bash -c \
          'cp /etc/hosts {{ bind_dir_on_container }} \
          && {{ sed_command }} {{ bind_dir_on_container }}/hosts \
          && cat {{ bind_dir_on_container }}/hosts > /etc/hosts \
          && rm {{ bind_dir_on_container }}/hosts'"
        args:
          executable: /bin/bash
        vars:
          iface_ip_list: "{{ ansible_play_hosts | map('extract', hostvars, 'ip_addresses') | map(attribute='results') }}"
          sed_command: sed -i '\''1s/^/{{ item[1].stdout | trim }} {{ item[1].item.container_name }}\n/'\''
        loop: "{{ containers_info | product(iface_ip_list | flatten(levels=1) | reject('search','skip_reason'))|list }}"

      # Iptables setup ready, but i'll leave it commented in case it interferes with hadoop/yarn tests
      # - name: Setup Iptables (1)
      #   when: item.host == inventory_hostname
      #   shell: "sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
      #     'iptables-nft -P FORWARD DROP \
      #     && iptables-nft -P INPUT DROP \
      #     && iptables-nft -A INPUT -m state --state INVALID -j DROP \
      #     && iptables-nft -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT \
      #     && iptables-nft -A INPUT -i lo -j ACCEPT'"
      #   args:
      #     executable: /bin/bash
      #   loop: "{{ containers_info }}"

      # - name: Setup Iptables (2)
      #   when: item[0].host == inventory_hostname
      #   shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[0].container_name }} bash -c \
      #     'iptables-nft -A INPUT -s {{ item[1].stdout | trim }} -j ACCEPT'"
      #   args:
      #     executable: /bin/bash
      #   vars:
      #     iface_ip_list: "{{ ansible_play_hosts | map('extract', hostvars, 'ip_addresses') | map(attribute='results') }}"
      #   loop: "{{ containers_info | product(iface_ip_list | flatten(levels=1) | reject('search','skip_reason'))|list }}"

    vars:
      - containers_info: "{{ containers_info_str | replace('\n','') | replace(' ','') }}"

    tags: never, setup_network

  - name: Setup hadoop on containers
    block:
      - name: Get containers IP addresses
        when: item.host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} hostname -I | awk '{print $1}'"
        args:
          executable: /bin/bash
        loop: "{{ containers_info }}"
        register: ip_addresses

      - name: get the username id running the deploy
        become: no
        local_action: command id -u
        register: userid_on_the_host

      - name: Copy app files already on containers
        when: item.host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c 'cp -pr /opt/files_dir {{ bind_dir_on_container }}/ && chown -R {{ userid_on_the_host.stdout }} {{ bind_dir_on_container }}/*'"
        args:
          executable: /bin/bash
        loop: "{{ containers_info }}"

      - name: Update workers file on containers
        when: item[0].host == inventory_hostname and item[1].item.container_name != rm_container
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[0].container_name }} bash -c \
          'echo {{ item[1].item.container_name }} >> $HADOOP_CONF_DIR/workers'"
        args:
          executable: /bin/bash
        vars:
          iface_ip_list: "{{ ansible_play_hosts | map('extract', hostvars, 'ip_addresses') | map(attribute='results') }}"
        loop: "{{ containers_info | product(iface_ip_list | flatten(levels=1) | reject('search','skip_reason'))|list }}"

      - name: Copy hadoop config files to containers
        when: item[0].host == inventory_hostname
        template:
          src: "templates/hadoop/{{ item[1] }}"
          dest: "{{ bind_dir }}/{{ item[0].container_name }}/{{ item[1] }}"
        vars:
          file_list: ["core-site.xml", "hdfs-site.xml", "yarn-site.xml", "mapred-site.xml", "hadoop-env.sh"]
          bind_path: "{{ item[0].disk_path if item[0].disk_path is defined else default_bind_path }}"
        loop: "{{ containers_info | product(file_list) | list }}"

      - name: Update hadoop config files in containers
        when: item[0].host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[0].container_name }} bash -c \
          'cp {{ bind_dir_on_container }}/{{ item[1] }} $HADOOP_CONF_DIR/{{ item[1] }}'"
        args:
          executable: /bin/bash
        vars:
          file_list: ["core-site.xml", "hdfs-site.xml", "yarn-site.xml", "mapred-site.xml", "hadoop-env.sh"]
        loop: "{{ containers_info | product(file_list) | list }}"

      - name: Copy spark config files to containers
        when: item[0].host == inventory_hostname
        template:
          src: "templates/spark/{{ item[1] }}"
          dest: "{{ bind_dir }}/{{ item[0].container_name }}/{{ item[1] }}"
        vars:
          file_list: ["spark-defaults.conf"]
          bind_path: "{{ item[0].disk_path if item[0].disk_path is defined else default_bind_path }}"
        loop: "{{ containers_info | product(file_list) | list }}"

      - name: Update spark config files in containers
        when: item[0].host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[0].container_name }} bash -c \
          'cp {{ bind_dir_on_container }}/{{ item[1] }} $SPARK_CONF_DIR/{{ item[1] }}'"
        args:
          executable: /bin/bash
        vars:
          file_list: ["spark-defaults.conf"]
        loop: "{{ containers_info | product(file_list) | list }}"

      - name: Update ssh known_hosts on ResourceManager/Namenode container
        when: rm_host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ rm_container }} bash -c \
          'ssh-keyscan -t rsa `hostname` >> ~/.ssh/known_hosts \
          && ssh-keyscan -t rsa -f $HADOOP_CONF_DIR/workers >> ~/.ssh/known_hosts'"
        args:
          executable: /bin/bash

      - name: Move RM/NN container ssh public key
        when: rm_host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ rm_container }} bash -c \
          'cp ~/.ssh/id_rsa.pub {{ bind_dir_on_container }}/{{ rm_container }}.pub'"
        args:
          executable: /bin/bash

      - name: Prepare RM/NN container bind path variable
        set_fact:
          rm_container_bind_path: "{{ item.disk_path if item.disk_path is defined else default_bind_path }}"
        when: "item.container_name == rm_container"
        with_items:
        - "{{ containers_info }}"

      - name: Fetch RM/NN container ssh public key
        when: rm_host == inventory_hostname
        fetch:
          src: "{{ bind_dir }}/{{ rm_container }}/{{ rm_container}}.pub"
          dest: "{{ installation_path }}/apps/{{ app_name }}/{{ rm_container}}.pub"
          flat: yes
        vars:
          bind_path: "{{ rm_container_bind_path }}"

      - name: Copy RM/NN container ssh public key to the other containers
        when: item.host == inventory_hostname and item.container_name != rm_container
        copy:
          src: "{{ installation_path }}/apps/{{ app_name }}/{{ rm_container}}.pub"
          dest: "{{ bind_dir }}/{{ item.container_name }}/{{ rm_container}}.pub"
        vars:
          bind_path: "{{ item.disk_path if item.disk_path is defined else default_bind_path }}"
        loop: "{{ containers_info }}"

      - name: Append RM/NN container ssh public key to authorized keys of containers
        when: item.host == inventory_hostname and item.container_name != rm_container
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
          'cat {{ bind_dir_on_container }}/{{ rm_container}}.pub >> ~/.ssh/authorized_keys
          && rm {{ bind_dir_on_container }}/{{ rm_container}}.pub'"
        args:
          executable: /bin/bash
        loop: "{{ containers_info }}"

      - name: Format filesystem, start HDFS and YARN
        when: rm_host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ rm_container }} bash -c \
          'cd $HADOOP_HOME \
          && bash format_filesystem.sh \
          && sbin/start-dfs.sh \
          && sbin/hadoop-daemon.sh stop secondarynamenode \
          && nohup sbin/start-yarn.sh'"
        args:
          executable: /bin/bash

      - name: Wait some seconds for Namenode to exit safe mode
        pause:
          seconds: 10

    vars:
      - containers_info: "{{ containers_info_str | replace('\n','') | replace(' ','') }}"
    tags: never, setup_hadoop

  ## Start
  - name: Start app on container
    block:
      - name: get the username id running the deploy
        become: no
        local_action: command id -u
        register: userid_on_the_host

      - name: Copy app files already on container if there was an installation
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} bash -c 'cp -pr /opt/{{ app_name }}/* {{ bind_dir_on_container }} && chown -R {{ userid_on_the_host.stdout }} {{ bind_dir_on_container }}/*'"
        when: "install_script != ''"
        args:
          executable: /bin/bash

      - name: Check if app files directory is already there
        when: "files_dir != ''"
        stat:
          path: "{{ container_bind_dir }}/{{ files_dir | basename }}"
        register: stat_output
        tags: stop_app

      - name: Copy app files directory
        when: "files_dir != '' and not stat_output.stat.exists"
        copy:
          src: "apps/{{ files_dir }}/"
          dest: "{{ container_bind_dir }}/{{ files_dir | basename }}"
          mode: preserve
        tags: stop_app

      - name: Copy app start script
        #copy:
        template:
          src: "apps/{{ start_script }}"
          dest: "{{ container_bind_dir }}/{{ start_script | basename }}"
          mode: preserve

      - name: Copy app stop script
        #copy:
        template:
          src: "apps/{{ stop_script }}"
          dest: "{{ container_bind_dir }}/{{ stop_script | basename }}"
          mode: preserve
        tags: stop_app

      - name: Copy app jar
        when: "app_jar != ''"
        copy:
          src: "apps/{{ app_jar }}"
          dest: "{{ container_bind_dir }}/{{ app_jar | basename }}"

      # - name: Move app jar to container home
      #   when: "app_jar != ''"
      #   shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} bash -c \
      #     'mv -f {{ bind_dir_on_container }}/{{ app_jar | basename }} ~/'"
      #   args:
      #     executable: /bin/bash

      - name: Execute start script on container
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} nohup bash {{ bind_dir_on_container }}/{{ start_script | basename }} </dev/null"
        #when: "'\"instance\": \"{{ item }}\",' not in apptainer_list_output.stdout"
        args:
          executable: /bin/bash

    tags: never, start_app

  ## Stop
  - name: Stop app on container
    block:
      - name: get the username id running the deploy
        become: no
        local_action: command id -u
        register: userid_on_the_host

      - name: Execute stop script on container
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} nohup bash {{ bind_dir_on_container }}/{{ stop_script | basename }} </dev/null"
        #when: "'\"instance\": \"{{ item }}\",' not in apptainer_list_output.stdout"
        args:
          executable: /bin/bash

      - name: Remove app install script
        when: "install_script != ''"
        file:
          path: "{{ container_bind_dir }}/{{ install_script | basename }}"
          state: absent

      - name: Remove app start script
        file:
          path: "{{ container_bind_dir }}/{{ start_script | basename }}"
          state: absent

      - name: Remove app stop script
        file:
          path: "{{ container_bind_dir }}/{{ stop_script | basename }}"
          state: absent

      - name: Remove app jar
        when: "app_jar != ''"
        file:
          path: "{{ container_bind_dir }}/{{ app_jar | basename }}"
          state: absent

      - name: Remove hadoop config files
        when: "app_jar != ''"
        file:
          path: "{{ container_bind_dir }}/{{ item }}"
          state: absent
        vars:
          file_list: ["core-site.xml", "hdfs-site.xml", "yarn-site.xml", "mapred-site.xml", "hadoop-env.sh", "spark-defaults.conf"]
        loop: "{{ file_list }}"

      - name: Remove container own ssh key
        file:
          path: "{{ container_bind_dir }}/{{ container }}.pub"
          state: absent

      - name: Remove hadoop files directory in container
        # Check empty string to avoid unwanted problems if the variable is somehow wrongly defined
        when: "' ' not in bind_dir_on_container"
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} bash -c \
          'rm -r {{ bind_dir_on_container}}/files_dir'"
        args:
          executable: /bin/bash

      # Workaround to avoid having result files root-owned
      # TODO: move results to another directory accesible for the user
      - name: Change remaining files permissions
        # Check empty string to avoid unwanted problems if the variable is somehow wrongly defined
        when: "app_jar != '' and ' ' not in userid_on_the_host.stdout"
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} bash -c \
          'cd {{ bind_dir_on_container }} \
          && chown -R {{ userid_on_the_host.stdout }} output_* | : \
          && chown {{ userid_on_the_host.stdout }} runtime_* | : \
          && chown -R {{ userid_on_the_host.stdout }} hadoop_logs'"
        args:
          executable: /bin/bash

      - name: Remove app files directory
        when: "files_dir != ''"
        file:
          path: "{{ container_bind_dir }}/{{ files_dir | basename }}"
          state: absent

    tags: never, stop_app

  ## Stop hadoop
  - name: Stop hadoop cluster
    block:
      - name: Stop hadoop cluster
        when: rm_host == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ rm_container }} bash -c \
          'cd $HADOOP_HOME \
          && sbin/stop-yarn.sh \
          && sbin/stop-dfs.sh'"
        args:
          executable: /bin/bash
    tags: never, stop_hadoop_cluster
