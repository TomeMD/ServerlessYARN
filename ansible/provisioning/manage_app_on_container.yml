# Start an app on a container
- hosts: nodes
  become: no
  gather_facts: no

  vars_files:
    - vars/main.yml
    - config/config.yml

  vars:
    - container_bind_dir: "{{ installation_path }}/singularity_binds/{{ container }}"
    - bind_dir_on_container: /opt/bind

  environment:
    BDWATCHDOG_PATH: "{{ bdwatchdog_path }}"
    RESCALING_PATH: "{{ serverless_containers_path }}/scripts/"
    PYTHONPATH: ":{{ serverless_containers_path }}"

  ## Singularity + cgroups v1
  tasks:
  ## Setup network
  ## TODO: maybe setup a DNS server is better
  ## TODO: setup iptables
  - name: Setup network on container
    block:

      - name: Get containers IP addresses
        when: item[0].key == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[1] }} hostname -I"
        args:
          executable: /bin/bash
        loop: "{{ container_loop }}"
        register: ip_addresses

      - name: Update hostname resolution in containers
        when: item[0][0].key == inventory_hostname
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[0][1] }} bash -c \
          'cp /etc/hosts {{ bind_dir_on_container }} \
          && {{ sed_command }} {{ bind_dir_on_container }}/hosts \
          && cat {{ bind_dir_on_container }}/hosts > /etc/hosts \
          && rm {{ bind_dir_on_container }}/hosts'"
        args:
          executable: /bin/bash
        vars:
          iface_ip_list: "{{ ansible_play_hosts | map('extract', hostvars, 'ip_addresses') | map(attribute='results') }}"
          sed_command: sed -i '\''1s/^/{{ item[1].stdout | trim }} {{ item[1].item[1] }}\n/'\''
        loop: "{{ container_loop | product(iface_ip_list | flatten(levels=1) | reject('search','skip_reason'))|list }}"

      # Iptables setup ready, but i'll leave it commented in case it interferes with hadoop/yarn tests
      # - name: Setup Iptables (1)
      #   when: item[0].key == inventory_hostname
      #   shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[1] }} bash -c \
      #     'iptables-nft -P FORWARD DROP \
      #     && iptables-nft -P INPUT DROP \
      #     && iptables-nft -A INPUT -m state --state INVALID -j DROP \
      #     && iptables-nft -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT \
      #     && iptables-nft -A INPUT -i lo -j ACCEPT'"
      #   args:
      #     executable: /bin/bash
      #   loop: "{{ container_loop }}"

      # - name: Setup Iptables (2)
      #   when: item[0][0].key == inventory_hostname
      #   shell: "sudo {{ singularity_command_alias }} exec instance://{{ item[0][1] }} bash -c \
      #     'iptables-nft -A INPUT -s {{ item[1].stdout | trim }} -j ACCEPT'"
      #   args:
      #     executable: /bin/bash
      #   vars:
      #     iface_ip_list: "{{ ansible_play_hosts | map('extract', hostvars, 'ip_addresses') | map(attribute='results') }}"
      #   loop: "{{ container_loop | product(iface_ip_list | flatten(levels=1) | reject('search','skip_reason'))|list }}"

    vars:
      - container_dict: "{{ app_containers }}"
      - container_loop: "{{ container_dict | dict2items | subelements('value') }}"
    tags: never, setup_network

  ## Start
  - name: Start app on container
    block:
      - name: get the username id running the deploy
        become: no
        local_action: command id -u
        register: userid_on_the_host

      - name: Copy app files already on container if there was an installation
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} bash -c 'cp -pr /opt/{{ app_name }}/* {{ bind_dir_on_container }} && chown -R {{ userid_on_the_host.stdout }} {{ bind_dir_on_container }}/*'"
        when: "install_script != ''"
        args:
          executable: /bin/bash

      - name: Check if app files directory is already there
        when: "files_dir != ''"
        stat:
          path: "{{ container_bind_dir }}/{{ files_dir }}"
        register: stat_output
        tags: stop_app

      - name: Copy app files directory
        when: "files_dir != '' and not stat_output.stat.exists"
        copy:
          src: "apps/{{ files_dir }}"
          dest: "{{ container_bind_dir }}/"
          mode: preserve
        tags: stop_app

      - name: Copy app start script
        copy:
          src: "apps/{{ start_script }}"
          dest: "{{ container_bind_dir }}/{{ start_script }}"
          mode: preserve

      - name: Copy app stop script
        copy:
          src: "apps/{{ stop_script }}"
          dest: "{{ container_bind_dir }}/{{ stop_script }}"
          mode: preserve
        tags: stop_app

      - name: Execute start script on container
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} nohup bash {{ bind_dir_on_container }}/{{ start_script }} </dev/null"
        #when: "'\"instance\": \"{{ item }}\",' not in apptainer_list_output.stdout"
        args:
          executable: /bin/bash

    tags: never, start_app

  ## Stop
  - name: Stop app on container
    block:
      - name: Execute stop script on container
        shell: "sudo {{ singularity_command_alias }} exec instance://{{ container }} nohup bash {{ bind_dir_on_container }}/{{ stop_script }} </dev/null"
        #when: "'\"instance\": \"{{ item }}\",' not in apptainer_list_output.stdout"
        args:
          executable: /bin/bash

      - name: Remove app files directory
        when: "files_dir != ''"
        file:
          path: "{{ container_bind_dir }}/{{ files_dir }}"
          state: absent

      - name: Remove app install script
        when: "install_script != ''"
        file:
          path: "{{ container_bind_dir }}/{{ install_script }}"
          state: absent

      - name: Remove app start script
        file:
          path: "{{ container_bind_dir }}/{{ start_script }}"
          state: absent

      - name: Remove app stop script
        file:
          path: "{{ container_bind_dir }}/{{ stop_script }}"
          state: absent

    tags: never, stop_app