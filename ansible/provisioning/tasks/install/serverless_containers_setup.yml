
- name: Install prerequisites for Serverless Containers
  when: "virtual_mode"
  apt:
    name:
     - python3-pip
     - gunicorn
     - jq
    state: latest
    update_cache: yes

- name: Install yq
  when: "virtual_mode"
  snap:
    name: yq
    state: present

- name: Check if ServerlessContainers directory is already there
  stat:
    path: "{{ serverless_containers_path }}"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: stat_output

## get the user executing the playbook
- name: get the username running the deploy
  become: no
  local_action: command whoami
  register: username_on_the_host

- name: Copy ServerlessContainers
  when: not stat_output.stat.exists
  copy:
    src: ServerlessContainers/
    dest: "{{ serverless_containers_path }}"
    owner: "{{ username_on_the_host.stdout_lines[0] }}"

- name: Install specified python requirements
  pip:
    requirements: "{{ serverless_containers_path }}/requirements.txt"
    executable: pip3

- name: Copy service aliases and port configuration to ServerlessContainers dir
  template:
    src: templates/sc_services_config.yml
    dest: "{{ serverless_containers_path }}/services_config.yml"

- name: Copy WattWizard global configuration to ServerlessContainers dir
  when: "power_budgeting"
  template:
    src: templates/wattwizard/global_config.sh
    dest: "{{ serverless_containers_path }}/conf/WattWizard/load-conf.sh"

- name: Copy InfluxDB environment variables for WattWizard to ServerlessContainers dir
  when: "power_budgeting"
  template:
    src: templates/wattwizard/influxdb_config.py
    dest: "{{ serverless_containers_path }}/src/WattWizard/influxdb/influxdb_env.py"

- name: Verify that the InfluxDB server is reachable
  when: "power_budgeting"
  wait_for:
    host: "{{ influxdb_host }}"
    port: 8086
    timeout: 30
  delegate_to: localhost
