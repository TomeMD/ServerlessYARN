
- name: Create apps directory
  delegate_to: localhost
  file:
    path: "{{ installation_path }}/apps/{{ app_base_name }}"
    state: directory
  tags: create_app

- name: Create apps directory
  delegate_to: localhost
  file:
    path: "{{ installation_path }}/apps/{{ app_name }}"
    state: directory
  tags: create_app

- name: Copy apptainer containers definition file
  delegate_to: localhost
  template:
    src: "templates/{{ template_definition_file }}"
    dest: "{{ installation_path }}/apps/{{ app_base_name }}/{{ definition_file }}"
  tags: create_app

# TODO: allow install script, start script or stop script to be included in files_dir
- name: Copy app files directory
  delegate_to: localhost
  when: "files_dir != ''"
  copy:
    src: "apps/{{ files_dir }}/"
    dest: "{{ installation_path }}/apps/{{ app_base_name }}/{{ files_dir | basename }}"
  tags: never, create_app

- name: Copy app install script
  delegate_to: localhost
  when: "install_script != ''"
  copy:
    src: "apps/{{ install_script }}"
    dest: "{{ installation_path }}/apps/{{ app_base_name }}/{{ install_script | basename }}"
  tags: never, create_app

- name: Copy necessary files for hadoop apps
  delegate_to: localhost
  when: "app_jar != ''"
  copy:
    src: "apps/hadoop/{{ item }}"
    dest: "{{ installation_path }}/apps/hadoop/"
  with_items:
    - setup.sh
    - files_dir
  tags: never, create_app

- name: Build image
  delegate_to: localhost
  #shell: "{{ singularity_command_alias }} build apps/{{ app_name }}/{{ image_file }} apps/{{ app_name }}/{{ definition_file }}"
  shell: "{{ singularity_command_alias }} build apps/{{ app_base_name }}/{{ image_file }} apps/{{ app_base_name }}/{{ definition_file }}"
  args:
    chdir: "{{ installation_path }}"
    executable: /bin/bash
    creates: "apps/{{ app_base_name }}/{{ image_file }}"
  tags: create_app

- name: Create images directory
  file:
    path: "{{ installation_path }}/images"
    state: directory

- name: Check if image is already copied
  stat:
    path: "{{ installation_path }}/images/{{ image_file }}"
  register: stat_output

- name: Copy image to host
  when: not stat_output.stat.exists
  copy:
    src: "{{ installation_path }}/apps/{{ app_base_name }}/{{ image_file }}"
    dest: "{{ installation_path }}/images/{{ image_file }}"
    mode: preserve

- name: Copy apptainer containers cgroup config
  template:
    src: "templates/{{ cgroups_file }}"
    dest: "{{ installation_path }}/{{ cgroups_file }}"

- name: Check containers status
  shell: "sudo {{ singularity_command_alias }} instance list -j"
  register: apptainer_list_output
  args:
    executable: /bin/bash

- name: Create directories to bind to containers
  when: "inventory_hostname == item.host"
  file:
    path: "{{ bind_dir }}/{{ item.container_name }}"
    state: directory
  vars:
   bind_path: "{{ item.disk_path if item.disk_path is defined else default_bind_path }}"
  loop: "{{ containers_info }}"

- name: Start apptainer containers
  shell: "sudo {{ singularity_command_alias }} instance start -C --net --network {{ mode }}_{{ inventory_hostname }}{{ extra_connection }} --hostname {{ item.container_name }} --apply-cgroups {{ cgroups_file }} --bind {{ bind_dir }}/{{ item.container_name }}:{{ bind_dir_on_container }} images/{{ image_file }} {{ item.container_name }}"
  when: "'\"instance\": \"{{ item.container_name }}\",' not in apptainer_list_output.stdout and inventory_hostname == item.host"
  args:
    chdir: "{{ installation_path }}"
    executable: /bin/bash
  vars:
    extra_connection: "{{ ',ptp' if mode == 'ipvlan' else '' }}"
    bind_path: "{{ item.disk_path if item.disk_path is defined else default_bind_path }}"
  loop: "{{ containers_info }}"

- name: Setup host resolution in containers (1)
  when: "inventory_hostname == item.host"
  copy:
    src: /etc/hosts
    remote_src: true
    dest: "{{ bind_dir }}/{{ item.container_name }}"
  vars:
   bind_path: "{{ item.disk_path if item.disk_path is defined else default_bind_path }}"
  loop: "{{ containers_info }}"

- name: Setup host resolution in containers (2)
  when: "inventory_hostname == item.host"
  # shell: "sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
  #   'echo 127.0.0.1 {{ item }} >> /etc/hosts'"
  shell: "sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
    'echo {{ server_ip }} opentsdb >> /etc/hosts'"
  args:
    chdir: "{{ installation_path }}"
    executable: /bin/bash
  loop: "{{ containers_info }}"

- name: Setup host resolution in containers (3)
  when: "inventory_hostname == item.host"
  shell: "sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
    'cat {{ bind_dir_on_container }}/hosts >> /etc/hosts \
    && rm {{ bind_dir_on_container }}/hosts'"
  args:
    chdir: "{{ installation_path }}"
    executable: /bin/bash
  loop: "{{ containers_info }}"

## Fix to get the right permissions on cgroups files
- name: Copy cgroups v1 permission changer script
  copy:
    src: scripts/change_cgroupsv1_permissions.py
    dest: "{{ installation_path }}/change_cgroupsv1_permissions.py"
    mode: preserve

- name: Change cgroups v1 permissions
  when: "inventory_hostname == item.host"
  shell: "python3 change_cgroupsv1_permissions.py {{ singularity_command_alias }} {{ singularity_cgroups_group }} {{ item.container_name }}"
  args:
    chdir: "{{ installation_path }}"
    executable: /bin/bash
  loop: "{{ containers_info }}"