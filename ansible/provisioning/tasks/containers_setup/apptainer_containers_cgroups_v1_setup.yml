- name: General containers setup
  block:
    - name: Create images directory
      file:
        path: "{{ installation_path }}/images"
        state: directory

    - name: Copy apptainer containers cgroup config
      template:
        src: "templates/{{ cgroups_file }}"
        dest: "{{ installation_path }}/{{ cgroups_file }}"

    ## Fix to get the right permissions on cgroups files
    - name: Copy cgroups v1 permission changer script
      copy:
        src: scripts/change_cgroupsv1_permissions.py
        dest: "{{ installation_path }}/change_cgroupsv1_permissions.py"
        mode: preserve

    - name: Create app base directory
      delegate_to: localhost
      file:
        path: "{{ installation_path }}/apps/{{ app_base_name }}"
        state: directory
      tags: create_app

    - name: Copy necessary files for hadoop apps
      delegate_to: localhost
      copy:
        src: "apps/hadoop/{{ item }}"
        dest: "{{ installation_path }}/apps/hadoop/"
      with_items:
        - setup.sh
        - java_snitch.sh
        - files_dir
      tags: create_app

- name: Containers startup
  block:

    - name: Create app directory
      delegate_to: localhost
      file:
        path: "{{ installation_path }}/apps/{{ app_name }}"
        state: directory
      tags: never, create_app

    - name: Copy apptainer containers definition file
      delegate_to: localhost
      template:
        src: "templates/{{ template_definition_file }}"
        dest: "{{ installation_path }}/apps/{{ app_base_name }}/{{ definition_file }}"
      tags: create_app

    - name: Create app files directory
      delegate_to: localhost
      when: "files_dir != '' and install_script != ''"
      file:
        path: "{{ installation_path }}/apps/{{ app_name }}/{{ files_dir | basename }}"
        state: directory
      tags: never, create_app

    # TODO: allow install script, start script or stop script to be included in files_dir
    - name: Copy app files directory
      delegate_to: localhost
      when: "files_dir != '' and install_script != ''"
      copy:
        src: "apps/{{ files_dir }}"
        dest: "{{ installation_path }}/apps/{{ app_base_name }}/"
      tags: never, create_app

    - name: Copy app install script
      delegate_to: localhost
      when: "install_script != ''"
      copy:
        src: "apps/{{ install_script }}"
        dest: "{{ installation_path }}/apps/{{ app_base_name }}/"
      tags: never, create_app

    - name: Build image
      delegate_to: localhost
      shell: "{{ singularity_command_alias }} build apps/{{ app_base_name }}/{{ image_file }} apps/{{ app_base_name }}/{{ definition_file }}"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
        creates: "apps/{{ app_base_name }}/{{ image_file }}"
      tags: create_app

    - name: Check if image is already copied
      stat:
        path: "{{ installation_path }}/images/{{ image_file }}"
        get_checksum: false
        get_mime: false
        get_attributes: false
      register: stat_output

    - name: Copy image to host
      when: not stat_output.stat.exists
      synchronize:
        src: "{{ installation_path }}/apps/{{ app_base_name }}/{{ image_file }}"
        dest: "{{ installation_path }}/images/{{ image_file }}"
        perms: true

    - name: Check containers status
      shell: "sudo {{ singularity_command_alias }} instance list -j"
      args:
        executable: /bin/bash
      register: apptainer_list_output

    - name: Create directories to bind to containers
      shell: "{% for item in containers_info %}
        {% if item.host == inventory_hostname %}
        {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
        mkdir -p {{ bind_dir }}/{{ item.container_name }} && 
        {% endif  %}
        {% endfor %}true"
      args:
        executable: /bin/bash

    - name: Start apptainer containers
      shell: "{% for item in containers_info %}
        {% if item.host == inventory_hostname and item.container_name not in apptainer_list_output.stdout %}
        {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
        sudo {{ singularity_command_alias }} instance start -C --net --network {{ mode }}_{{ inventory_hostname }}{{ extra_connection }} --hostname {{ item.container_name }} --apply-cgroups {{ cgroups_file }} --bind {{ bind_dir }}/{{ item.container_name }}:{{ bind_dir_on_container }} images/{{ image_file }} {{ item.container_name }} && 
        {% endif  %}
        {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash
      vars:
        extra_connection: "{{ ',ptp' if mode == 'ipvlan' else '' }}"

    - name: Setup host resolution in containers and change cgroups v1 permissions
      shell: "{% for item in containers_info %}
        {% if item.host == inventory_hostname %}
        {% set bind_dir = item.disk_path + '/' + bind_dir_name if item.disk_path is defined else default_bind_path + '/' + bind_dir_name %}
        cp /etc/hosts {{ bind_dir }}/{{ item.container_name }}/hosts \
        && sudo {{ singularity_command_alias }} exec instance://{{ item.container_name }} bash -c \
          'echo {{ server_ip }} opentsdb >> /etc/hosts \
          && cat {{ bind_dir_on_container }}/hosts >> /etc/hosts \
          && rm {{ bind_dir_on_container }}/hosts' \
        && python3 change_cgroupsv1_permissions.py {{ singularity_command_alias }} {{ singularity_cgroups_group }} {{ item.container_name }} && 
        {% endif  %}
        {% endfor %}true"
      args:
        chdir: "{{ installation_path }}"
        executable: /bin/bash

  tags: start_containers