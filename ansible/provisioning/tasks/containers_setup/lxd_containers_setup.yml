
## Install OpenSSL key with provided script
- name: Create OpenSSL key and certificate
  shell: bash scripts/lxd/create_lxd_key.sh
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    creates: "{{ lxd_key_path }}/{{ lxd_key_name }}.crt"

## Add certificate to trust store
- name: Check if certificate already added to trust store
  shell: lxc config trust list -f csv | wc -l  
  register: lxc_trust_output
        
- name: Setup lxd (1)
  shell: "lxc config trust add {{ lxd_key_path }}/{{ lxd_key_name }}.crt"
  when: lxc_trust_output.stdout | int == 0
  args:
    executable: /bin/bash
    
- name: Setup lxd (2)
  shell: lxc config set core.https_address [::]:8443
  args:
    executable: /bin/bash
    
- name: Setup lxd (3)
  shell: lxc config set core.trust_password TRUE
  args:
    executable: /bin/bash

- name: Init lxd
  shell: lxd init --auto


## Start containers
- name: Check lxc containers status
  shell: lxc list -f csv 
  register: lxc_list_output
  args:
    executable: /bin/bash
  
- name: Init lxc containers
  shell: lxc init ubuntu:20.04 {{ item }}
  when: "item not in lxc_list_output.stdout"
  loop: "{{ hostvars[inventory_hostname].containers }}"
  
- name: Check again containers status
  shell: lxc list -f csv | grep {{ item }}
  register: lxc_list_output
  loop: "{{ hostvars[inventory_hostname].containers }}"
  ignore_errors: yes
  args:
    executable: /bin/bash
  
- name: Start lxc containers
  shell: lxc start {{ item.item }}
  when: "'STOPPED' in item.stdout"
  with_items: "{{ lxc_list_output.results }}"
  
## Send metrics  
- name: Atop executable check in lxc containers
  shell: lxc exec {{ item }} -- sudo bash -c "ls /usr/bin/atop"
  register: ls_output
  ignore_errors: yes
  loop: "{{ hostvars[inventory_hostname].containers }}"

- name: Copy atop executable to containers
  shell: lxc file push /usr/bin/atop {{ item.item }}/usr/bin/
  when: "'atop' not in item.stdout"
  args:
    executable: /bin/bash
  with_items: "{{ ls_output.results }}"

- name: Create installation directory in containers
  shell: lxc exec {{ item }} -- sudo bash -c "mkdir -p {{ installation_path }}"
  args:
    chdir: "{{ installation_path }}"
    executable: /bin/bash
  loop: "{{ hostvars[inventory_hostname].containers }}"

- name: Copy BDWatchdog to containers
  shell: "lxc file push -r BDWatchdog/ {{ item }}{{ installation_path }}"
  args:
    chdir: "{{ installation_path }}"
    executable: /bin/bash
  loop: "{{ hostvars[inventory_hostname].containers }}"

#- name: Install requirements in containers
#  shell: lxc exec {{ item }} -- sudo bash -c "echo '{{ hostvars[groups['server'][0]].host_ip }} opentsdb' >> /etc/hosts &&
#    apt-get -y update &&
#    apt-get install -y --no-install-recommends python3-pip &&
#    cd {{ bdwatchdog_path }}/MetricsFeeder &&
#    pip3 install -r requirements.txt"
#  loop: "{{ hostvars[inventory_hostname].containers }}"

- name: Install requirements in containers
  shell: lxc exec {{ item }} -- sudo bash -c "apt-get -y update &&
    apt-get install -y --no-install-recommends python3-pip &&
    cd {{ bdwatchdog_path }}/MetricsFeeder &&
    pip3 install -r requirements.txt"
  loop: "{{ hostvars[inventory_hostname].containers }}" 

- name: Tmux session check in containers
  shell: lxc exec {{ item }} -- sudo bash -c "tmux ls"
  register: tmux_output
  loop: "{{ hostvars[inventory_hostname].containers }}"
  ignore_errors: yes
  
- name: Start sending metrics to opentsdb
  shell: lxc exec {{ item.item }} -- sudo bash -c "cd {{ bdwatchdog_path }}/MetricsFeeder && bash scripts/run_atop_stream_tmux.sh"
  when: "'ATOP' not in item.stdout"
  with_items: "{{ tmux_output.results }}"
  
