
# Initializing State Database
- name: Check existing tables in CouchDB
  shell: "curl -u admin:{{ couchdb_admin_pass }} -X GET http://127.0.0.1:{{ couchdb_port }}/_all_dbs"
  register: couchdb_tables
  args:
    executable: /bin/bash

- name: Initializing State Database - services
  when: "'services' not in couchdb_tables.stdout"
  shell: python3 conf/StateDatabase/services.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Initializing State Database - create other tables
  when: "'events' not in couchdb_tables.stdout and 'requests' not in couchdb_tables.stdout and 'limits' not in couchdb_tables.stdout and 'structures' not in couchdb_tables.stdout"
  shell: python3 conf/StateDatabase/other_tables.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Initializing State Database - rules
  when: "'rules' not in couchdb_tables.stdout"
  shell: python3 conf/StateDatabase/rules.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Tmux session check
  shell: tmux ls
  register: tmux_output
  ignore_errors: yes
  tags: restart_services

# Starting Services
- name: Starting Services
  when: "item not in tmux_output.stdout"
  shell: "bash scripts/services/{{ item }}/start_tmux.sh"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  with_items:
    - orchestrator
    - database_snapshoter
    - structure_snapshoter
    - guardian
    - scaler
    - refeeder
    - sanity_checker
    - rebalancer
  tags: restart_services

## Hosts
- name: Initializing State Database - hosts
  shell: "python3 scripts/stateDatabase/add_hosts_API.py {{ item }} {{ hostvars[item].cpu }} {{ hostvars[item].mem }} {{ disks }} config/config.yml"
  args:
    executable: /bin/bash
  vars:
    disks: "{{ hostvars[item].disks | replace(' ','') | quote }}"
  with_items: "{{ nodes }}"

- name: Initializing State Database - add individual disks to hosts
  shell: "python3 scripts/stateDatabase/add_disks_to_hosts.py {{ new_disks_dict }} config/config.yml"
  args:
    executable: /bin/bash
  vars:
    new_disks_dict: "{{ new_disks_dict_str | replace(' ','') | quote }}"
  tags: never, add_disks

- name: Initializing State Database - add disks to existing LV
  shell: "python3 scripts/stateDatabase/update_host_disks_bw_db.py {{ item }} lvm {{ hostvars[item].disks.lvm.bw }} MB/s config/config.yml"
  args:
    executable: /bin/bash
  with_items: "{{ nodes }}"
  tags: never, extend_lv

## Disable scaler service before adding containers
- name: Disabling Scaler service
  shell: "bash scripts/orchestrator/Scaler/deactivate.sh"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  tags: never, start_containers, disable_scaler

## Containers
- name: Initializing State Database - containers
  shell: "python3 scripts/stateDatabase/add_containers_API_v3.py {{ containers_info | replace(' ','') | quote }} config/config.yml"
  args:
    executable: /bin/bash
  tags: start_containers

## Reactivate Scaler after adding containers
- name: Activating Scaler service
  shell: "bash scripts/orchestrator/Scaler/activate.sh"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  tags: never, start_containers, enable_scaler

## Activate Services
- name: Activating Services
  shell: "bash scripts/orchestrator/{{ item }}/activate.sh"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
  with_items:
    - DatabaseSnapshoter
    - StructuresSnapshoter
    - Guardian
    - Scaler
    - Refeeder
    - Rebalancer
  tags: restart_services