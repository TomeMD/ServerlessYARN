
#- name: Source pythonpath
#  shell: source set_pythonpath.sh
#  args:
#     chdir: /root/ServerlessContainers
#     executable: /bin/bash

# Prepare environment for scripts
- name: Prepare Environment for scripts - BDWATCHDOG_PATH
  lineinfile:
    path: /etc/environment
    line: "export BDWATCHDOG_PATH={{ bdwatchdog_path }}"

- name: Prepare Environment for scripts - RESCALING_PATH
  lineinfile:
    path: /etc/environment
    line: "export RESCALING_PATH={{ serverless_containers_path }}/scripts/"

- name: Prepare Environment for scripts - PYTHONPATH
  lineinfile:
    path: /etc/environment
    line: "export PYTHONPATH=:{{ serverless_containers_path }}"

# Initializing State Database
- name: Check existing tables in CouchDB
  shell: curl -u admin:admin -X GET http://127.0.0.1:5984/_all_dbs
  register: couchdb_tables
  args:
    executable: /bin/bash

- name: Initializing State Database - services
  shell: python3 conf/StateDatabase/services.py
  when: "'services' not in couchdb_tables.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Initializing State Database - create other tables
  shell: python3 conf/StateDatabase/other_tables.py
  when: "'events' not in couchdb_tables.stdout and 'requests' not in couchdb_tables.stdout and 'limits' not in couchdb_tables.stdout and 'structures' not in couchdb_tables.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Initializing State Database - rules
  shell: python3 conf/StateDatabase/rules.py
  when: "'rules' not in couchdb_tables.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
## Structures Using new script 
- name: Initializing State Database - structures
  shell: "python3 stateDatabase/add_containers.py app1 {{ item }} {{ hostvars[item].containers | replace('[','') | replace(']','') | replace(', ',',') }} config/config.yml"
  args:
    executable: /bin/bash
  with_items: "{{ groups['nodes'] }}"
  
## Limits Using new script 
- name: Initializing State Database - limits
  shell: "python3 stateDatabase/add_limits.py app1 {{ hostvars[item].containers | replace('[','') | replace(']','') | replace(', ',',') | replace(',',' ') }}"
  args:
    executable: /bin/bash
  with_items: "{{ groups['nodes'] }}"

## Initialize cpu resource info of hosts
- name: Initializing State Database - hosts CPU info
  shell: "python3 stateDatabase/update_host_cpu.py {{ item }} {{ cpus_per_client_node }} {{ hostvars[item].containers | replace('[','') | replace(']','') | replace(', ',',') }} false"
  args:
    executable: /bin/bash
  with_items: "{{ groups['nodes'] }}"

# Starting Services
- name: Tmux session check
  shell: tmux ls
  register: tmux_output
  ignore_errors: yes
  #no_log: True

- name: Starting Services - orchestrator
  shell: bash scripts/services/orchestrator/start_tmux.sh
  when: "'orchestrator' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - database snapshoter
  shell: bash scripts/services/database_snapshoter/start_tmux.sh
  when: "'database_snapshoter' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - structure snapshoter
  shell: bash scripts/services/structure_snapshoter/start_tmux.sh
  when: "'structure_snapshoter' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - guardian
  shell: bash scripts/services/guardian/start_tmux.sh
  when: "'guardian' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
       
- name: Starting Services - scaler
  shell: bash scripts/services/scaler/start_tmux.sh
  when: "'scaler' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
 
- name: Starting Services - refeeder
  shell: bash scripts/services/refeeder/start_tmux.sh
  when: "'refeeder' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - sanity checker
  shell: bash scripts/services/sanity_checker/start_tmux.sh
  when: "'sanity_checker' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Starting Services - rebalancer
  shell: bash scripts/services/rebalancer/start_tmux.sh
  when: "'rebalancer' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

## Activate Services

- name: Starting Services - Activate database snapshoter
  shell: bash scripts/orchestrator/DatabaseSnapshoter/activate.sh
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Starting Services - Activate structures snapshoter
  shell: bash scripts/orchestrator/StructuresSnapshoter/activate.sh
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Starting Services - Activate guardian
  shell: bash scripts/orchestrator/Guardian/activate.sh
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

- name: Starting Services - Activate scaler
  shell: bash scripts/orchestrator/Scaler/activate.sh
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash

## Initialize container limits on Node Recaler
- name: Initializing State Database - container cpu limit on Node Rescaler
  shell: "python3 stateDatabase/init_host_node_rescaler.py {{ item }} cpu {{ cpus_per_client_node }} {{ hostvars[item].containers | replace('[','') | replace(']','') | replace(', ',',') }}"
  args:
    executable: /bin/bash
  with_items: "{{ groups['nodes'] }}"

- name: Initializing State Database - container mem limit on Node Rescaler
  shell: "python3 stateDatabase/init_host_node_rescaler.py {{ item }} mem {{ memory_per_client_node }} {{ hostvars[item].containers | replace('[','') | replace(']','') | replace(', ',',') }}"
  args:
    executable: /bin/bash
  with_items: "{{ groups['nodes'] }}"