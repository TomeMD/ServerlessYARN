
#- name: Source pythonpath
#  shell: source set_pythonpath.sh
#  args:
#     chdir: /root/ServerlessContainers
#     executable: /bin/bash

# Prepare environment for scripts
- name: Prepare Environment for scripts - BDWATCHDOG_PATH
  lineinfile:
    path: /etc/environment
    line: "export BDWATCHDOG_PATH={{ bdwatchdog_path }}"

- name: Prepare Environment for scripts - RESCALING_PATH
  lineinfile:
    path: /etc/environment
    line: "export RESCALING_PATH={{ serverless_containers_path }}/scripts/"

- name: Prepare Environment for scripts - PYTHONPATH
  lineinfile:
    path: /etc/environment
    line: "export PYTHONPATH=:{{ serverless_containers_path }}"

# Initializing State Database
- name: Initializing State Database - services
  shell: python3 quickstart/StateDatabase/services.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Initializing State Database - events and requests
  shell: python3 quickstart/StateDatabase/events_and_requests.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Initializing State Database - rules
  shell: python3 quickstart/StateDatabase/rules.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Initializing State Database - limits
  shell: python3 quickstart/StateDatabase/limits.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
 
# Using quickstart script    
- name: Initializing State Database - structures
  shell: python3 quickstart/StateDatabase/structures.py
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
## Using new script 
#-> aún lo estoy ajustando para usarlo en lugar del anterior y así usar los contenedores definidos en el ansible.inventory   

#- name: Copy add_containers script
#  copy:
#    src: stateDatabase/add_containers.py
#    dest: "{{ serverless_containers_path }}/quickstart/StateDatabase/add_containers.py"

#- name: Initializing State Database - structures
#  shell: "python3 quickstart/StateDatabase/add_containers.py app1 {{ hostvars[groups['nodes'][item]].inventory_hostname }} {{ hostvars[groups['nodes'][item]].containers | replace('[','') | replace(']','') }}"
  #debug: 
  #  msg: "An item: {{ hostvars[groups['nodes'][item]].containers | replace('[','') | replace(']','') }}"
#  args:
#    chdir: "{{ serverless_containers_path }}"
#    executable: /bin/bash
  #with_items: "{{ hostvars[groups['nodes']] | length }}"
#  with_items:
#   - 0
 
# Starting Services

- name: Tmux session check
  shell: tmux ls
  register: tmux_output
  ignore_errors: yes
  #no_log: True

- name: Starting Services - orchestrator
  shell: bash scripts/services/orchestrator/start_tmux.sh
  when: "'orchestrator' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - database snapshoter
  shell: bash scripts/services/database_snapshoter/start_tmux.sh
  when: "'database_snapshoter' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - structure snapshoter
  shell: bash scripts/services/structure_snapshoter/start_tmux.sh
  when: "'structure_snapshoter' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - guardian
  shell: bash scripts/services/guardian/start_tmux.sh
  when: "'guardian' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
   
- name: Starting Services - Activate guardian
  shell: bash scripts/orchestrator/Guardian/activate_guardian.sh
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - scaler
  shell: bash scripts/services/scaler/start_tmux.sh
  when: "'scaler' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
 
- name: Starting Services - Activate scaler
  shell: bash scripts/orchestrator/Scaler/activate_scaler.sh
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - refeeder
  shell: bash scripts/services/refeeder/start_tmux.sh
  when: "'refeeder' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash
    
- name: Starting Services - sanity checker
  shell: bash scripts/services/sanity_checker/start_tmux.sh
  when: "'sanity_checker' not in tmux_output.stdout"
  args:
    chdir: "{{ serverless_containers_path }}"
    executable: /bin/bash 
